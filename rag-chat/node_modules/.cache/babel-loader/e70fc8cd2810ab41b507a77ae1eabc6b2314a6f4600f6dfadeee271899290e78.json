{"ast":null,"code":"/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport { ccount } from 'ccount';\nimport { ok as assert } from 'devlop';\nimport { unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nimport { findAndReplace } from 'mdast-util-find-and-replace';\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing';\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label'];\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  };\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [{\n      character: '@',\n      before: '[+\\\\-.\\\\w]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    }, {\n      character: '.',\n      before: '[Ww]',\n      after: '[\\\\-.\\\\w]',\n      inConstruct,\n      notInConstruct\n    }, {\n      character: ':',\n      before: '[ps]',\n      after: '\\\\/',\n      inConstruct,\n      notInConstruct\n    }]\n  };\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({\n    type: 'link',\n    title: null,\n    url: '',\n    children: []\n  }, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token);\n  const node = this.stack[this.stack.length - 1];\n  assert(node.type === 'link');\n  node.url = 'http://' + this.sliceSerialize(token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token);\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token);\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(tree, [[/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl], [/(?<=^|[\\t-\\r \\xA0\\u1680\\u2000-\\u200A\\u2028\\u2029\\u202F\\u205F\\u3000\\uFEFF]|(?:[!-#%-\\*,-\\/:;\\?@\\[-\\]_\\{\\}\\xA1\\xA7\\xAB\\xB6\\xB7\\xBB\\xBF\\u037E\\u0387\\u055A-\\u055F\\u0589\\u058A\\u05BE\\u05C0\\u05C3\\u05C6\\u05F3\\u05F4\\u0609\\u060A\\u060C\\u060D\\u061B\\u061D-\\u061F\\u066A-\\u066D\\u06D4\\u0700-\\u070D\\u07F7-\\u07F9\\u0830-\\u083E\\u085E\\u0964\\u0965\\u0970\\u09FD\\u0A76\\u0AF0\\u0C77\\u0C84\\u0DF4\\u0E4F\\u0E5A\\u0E5B\\u0F04-\\u0F12\\u0F14\\u0F3A-\\u0F3D\\u0F85\\u0FD0-\\u0FD4\\u0FD9\\u0FDA\\u104A-\\u104F\\u10FB\\u1360-\\u1368\\u1400\\u166E\\u169B\\u169C\\u16EB-\\u16ED\\u1735\\u1736\\u17D4-\\u17D6\\u17D8-\\u17DA\\u1800-\\u180A\\u1944\\u1945\\u1A1E\\u1A1F\\u1AA0-\\u1AA6\\u1AA8-\\u1AAD\\u1B4E\\u1B4F\\u1B5A-\\u1B60\\u1B7D-\\u1B7F\\u1BFC-\\u1BFF\\u1C3B-\\u1C3F\\u1C7E\\u1C7F\\u1CC0-\\u1CC7\\u1CD3\\u2010-\\u2027\\u2030-\\u2043\\u2045-\\u2051\\u2053-\\u205E\\u207D\\u207E\\u208D\\u208E\\u2308-\\u230B\\u2329\\u232A\\u2768-\\u2775\\u27C5\\u27C6\\u27E6-\\u27EF\\u2983-\\u2998\\u29D8-\\u29DB\\u29FC\\u29FD\\u2CF9-\\u2CFC\\u2CFE\\u2CFF\\u2D70\\u2E00-\\u2E2E\\u2E30-\\u2E4F\\u2E52-\\u2E5D\\u3001-\\u3003\\u3008-\\u3011\\u3014-\\u301F\\u3030\\u303D\\u30A0\\u30FB\\uA4FE\\uA4FF\\uA60D-\\uA60F\\uA673\\uA67E\\uA6F2-\\uA6F7\\uA874-\\uA877\\uA8CE\\uA8CF\\uA8F8-\\uA8FA\\uA8FC\\uA92E\\uA92F\\uA95F\\uA9C1-\\uA9CD\\uA9DE\\uA9DF\\uAA5C-\\uAA5F\\uAADE\\uAADF\\uAAF0\\uAAF1\\uABEB\\uFD3E\\uFD3F\\uFE10-\\uFE19\\uFE30-\\uFE52\\uFE54-\\uFE61\\uFE63\\uFE68\\uFE6A\\uFE6B\\uFF01-\\uFF03\\uFF05-\\uFF0A\\uFF0C-\\uFF0F\\uFF1A\\uFF1B\\uFF1F\\uFF20\\uFF3B-\\uFF3D\\uFF3F\\uFF5B\\uFF5D\\uFF5F-\\uFF65]|\\uD800[\\uDD00-\\uDD02\\uDF9F\\uDFD0]|\\uD801\\uDD6F|\\uD802[\\uDC57\\uDD1F\\uDD3F\\uDE50-\\uDE58\\uDE7F\\uDEF0-\\uDEF6\\uDF39-\\uDF3F\\uDF99-\\uDF9C]|\\uD803[\\uDD6E\\uDEAD\\uDF55-\\uDF59\\uDF86-\\uDF89]|\\uD804[\\uDC47-\\uDC4D\\uDCBB\\uDCBC\\uDCBE-\\uDCC1\\uDD40-\\uDD43\\uDD74\\uDD75\\uDDC5-\\uDDC8\\uDDCD\\uDDDB\\uDDDD-\\uDDDF\\uDE38-\\uDE3D\\uDEA9\\uDFD4\\uDFD5\\uDFD7\\uDFD8]|\\uD805[\\uDC4B-\\uDC4F\\uDC5A\\uDC5B\\uDC5D\\uDCC6\\uDDC1-\\uDDD7\\uDE41-\\uDE43\\uDE60-\\uDE6C\\uDEB9\\uDF3C-\\uDF3E]|\\uD806[\\uDC3B\\uDD44-\\uDD46\\uDDE2\\uDE3F-\\uDE46\\uDE9A-\\uDE9C\\uDE9E-\\uDEA2\\uDF00-\\uDF09\\uDFE1]|\\uD807[\\uDC41-\\uDC45\\uDC70\\uDC71\\uDEF7\\uDEF8\\uDF43-\\uDF4F\\uDFFF]|\\uD809[\\uDC70-\\uDC74]|\\uD80B[\\uDFF1\\uDFF2]|\\uD81A[\\uDE6E\\uDE6F\\uDEF5\\uDF37-\\uDF3B\\uDF44]|\\uD81B[\\uDD6D-\\uDD6F\\uDE97-\\uDE9A\\uDFE2]|\\uD82F\\uDC9F|\\uD836[\\uDE87-\\uDE8B]|\\uD839\\uDDFF|\\uD83A[\\uDD5E\\uDD5F])|(?:[\\$\\+<->\\^`\\|~\\xA2-\\xA6\\xA8\\xA9\\xAC\\xAE-\\xB1\\xB4\\xB8\\xD7\\xF7\\u02C2-\\u02C5\\u02D2-\\u02DF\\u02E5-\\u02EB\\u02ED\\u02EF-\\u02FF\\u0375\\u0384\\u0385\\u03F6\\u0482\\u058D-\\u058F\\u0606-\\u0608\\u060B\\u060E\\u060F\\u06DE\\u06E9\\u06FD\\u06FE\\u07F6\\u07FE\\u07FF\\u0888\\u09F2\\u09F3\\u09FA\\u09FB\\u0AF1\\u0B70\\u0BF3-\\u0BFA\\u0C7F\\u0D4F\\u0D79\\u0E3F\\u0F01-\\u0F03\\u0F13\\u0F15-\\u0F17\\u0F1A-\\u0F1F\\u0F34\\u0F36\\u0F38\\u0FBE-\\u0FC5\\u0FC7-\\u0FCC\\u0FCE\\u0FCF\\u0FD5-\\u0FD8\\u109E\\u109F\\u1390-\\u1399\\u166D\\u17DB\\u1940\\u19DE-\\u19FF\\u1B61-\\u1B6A\\u1B74-\\u1B7C\\u1FBD\\u1FBF-\\u1FC1\\u1FCD-\\u1FCF\\u1FDD-\\u1FDF\\u1FED-\\u1FEF\\u1FFD\\u1FFE\\u2044\\u2052\\u207A-\\u207C\\u208A-\\u208C\\u20A0-\\u20C0\\u2100\\u2101\\u2103-\\u2106\\u2108\\u2109\\u2114\\u2116-\\u2118\\u211E-\\u2123\\u2125\\u2127\\u2129\\u212E\\u213A\\u213B\\u2140-\\u2144\\u214A-\\u214D\\u214F\\u218A\\u218B\\u2190-\\u2307\\u230C-\\u2328\\u232B-\\u2429\\u2440-\\u244A\\u249C-\\u24E9\\u2500-\\u2767\\u2794-\\u27C4\\u27C7-\\u27E5\\u27F0-\\u2982\\u2999-\\u29D7\\u29DC-\\u29FB\\u29FE-\\u2B73\\u2B76-\\u2B95\\u2B97-\\u2BFF\\u2CE5-\\u2CEA\\u2E50\\u2E51\\u2E80-\\u2E99\\u2E9B-\\u2EF3\\u2F00-\\u2FD5\\u2FF0-\\u2FFF\\u3004\\u3012\\u3013\\u3020\\u3036\\u3037\\u303E\\u303F\\u309B\\u309C\\u3190\\u3191\\u3196-\\u319F\\u31C0-\\u31E5\\u31EF\\u3200-\\u321E\\u322A-\\u3247\\u3250\\u3260-\\u327F\\u328A-\\u32B0\\u32C0-\\u33FF\\u4DC0-\\u4DFF\\uA490-\\uA4C6\\uA700-\\uA716\\uA720\\uA721\\uA789\\uA78A\\uA828-\\uA82B\\uA836-\\uA839\\uAA77-\\uAA79\\uAB5B\\uAB6A\\uAB6B\\uFB29\\uFBB2-\\uFBC2\\uFD40-\\uFD4F\\uFDCF\\uFDFC-\\uFDFF\\uFE62\\uFE64-\\uFE66\\uFE69\\uFF04\\uFF0B\\uFF1C-\\uFF1E\\uFF3E\\uFF40\\uFF5C\\uFF5E\\uFFE0-\\uFFE6\\uFFE8-\\uFFEE\\uFFFC\\uFFFD]|\\uD800[\\uDD37-\\uDD3F\\uDD79-\\uDD89\\uDD8C-\\uDD8E\\uDD90-\\uDD9C\\uDDA0\\uDDD0-\\uDDFC]|\\uD802[\\uDC77\\uDC78\\uDEC8]|\\uD803[\\uDD8E\\uDD8F]|\\uD805\\uDF3F|\\uD807[\\uDFD5-\\uDFF1]|\\uD81A[\\uDF3C-\\uDF3F\\uDF45]|\\uD82F\\uDC9C|\\uD833[\\uDC00-\\uDCEF\\uDD00-\\uDEB3\\uDF50-\\uDFC3]|\\uD834[\\uDC00-\\uDCF5\\uDD00-\\uDD26\\uDD29-\\uDD64\\uDD6A-\\uDD6C\\uDD83\\uDD84\\uDD8C-\\uDDA9\\uDDAE-\\uDDEA\\uDE00-\\uDE41\\uDE45\\uDF00-\\uDF56]|\\uD835[\\uDEC1\\uDEDB\\uDEFB\\uDF15\\uDF35\\uDF4F\\uDF6F\\uDF89\\uDFA9\\uDFC3]|\\uD836[\\uDC00-\\uDDFF\\uDE37-\\uDE3A\\uDE6D-\\uDE74\\uDE76-\\uDE83\\uDE85\\uDE86]|\\uD838[\\uDD4F\\uDEFF]|\\uD83B[\\uDCAC\\uDCB0\\uDD2E\\uDEF0\\uDEF1]|\\uD83C[\\uDC00-\\uDC2B\\uDC30-\\uDC93\\uDCA0-\\uDCAE\\uDCB1-\\uDCBF\\uDCC1-\\uDCCF\\uDCD1-\\uDCF5\\uDD0D-\\uDDAD\\uDDE6-\\uDE02\\uDE10-\\uDE3B\\uDE40-\\uDE48\\uDE50\\uDE51\\uDE60-\\uDE65\\uDF00-\\uDFFF]|\\uD83D[\\uDC00-\\uDED7\\uDEDC-\\uDEEC\\uDEF0-\\uDEFC\\uDF00-\\uDF76\\uDF7B-\\uDFD9\\uDFE0-\\uDFEB\\uDFF0]|\\uD83E[\\uDC00-\\uDC0B\\uDC10-\\uDC47\\uDC50-\\uDC59\\uDC60-\\uDC87\\uDC90-\\uDCAD\\uDCB0-\\uDCBB\\uDCC0\\uDCC1\\uDD00-\\uDE53\\uDE60-\\uDE6D\\uDE70-\\uDE7C\\uDE80-\\uDE89\\uDE8F-\\uDEC6\\uDECE-\\uDEDC\\uDEDF-\\uDEE9\\uDEF0-\\uDEF8\\uDF00-\\uDF92\\uDF94-\\uDFEF]))([\\+\\x2D\\.0-9A-Z_a-z]+)@([\\x2D0-9A-Z_a-z]+(?:\\.[\\x2D0-9A-Z_a-z]+)+)/g, findEmail]], {\n    ignore: ['link', 'linkReference']\n  });\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = '';\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false;\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain;\n    protocol = '';\n    prefix = 'http://';\n  }\n  if (!isCorrectDomain(domain)) {\n    return false;\n  }\n  const parts = splitUrl(domain + path);\n  if (!parts[0]) return false;\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{\n      type: 'text',\n      value: protocol + parts[0]\n    }]\n  };\n  if (parts[1]) {\n    return [result, {\n      type: 'text',\n      value: parts[1]\n    }];\n  }\n  return result;\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n  // Not an expected previous character.\n  !previous(match, true) ||\n  // Label ends in not allowed character.\n  /[-\\d_]$/.test(label)) {\n    return false;\n  }\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{\n      type: 'text',\n      value: atext + '@' + label\n    }]\n  };\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.');\n  if (parts.length < 2 || parts[parts.length - 1] && (/_/.test(parts[parts.length - 1]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 1])) || parts[parts.length - 2] && (/_/.test(parts[parts.length - 2]) || !/[a-zA-Z\\d]/.test(parts[parts.length - 2]))) {\n    return false;\n  }\n  return true;\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url);\n  if (!trailExec) {\n    return [url, undefined];\n  }\n  url = url.slice(0, trailExec.index);\n  let trail = trailExec[0];\n  let closingParenIndex = trail.indexOf(')');\n  const openingParens = ccount(url, '(');\n  let closingParens = ccount(url, ')');\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1);\n    trail = trail.slice(closingParenIndex + 1);\n    closingParenIndex = trail.indexOf(')');\n    closingParens++;\n  }\n  return [url, trail];\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1);\n  return (match.index === 0 || unicodeWhitespace(code) || unicodePunctuation(code)) && (\n  // If it’s an email, the previous character should not be a slash.\n  !email || code !== 47);\n}","map":{"version":3,"names":["ccount","ok","assert","unicodePunctuation","unicodeWhitespace","findAndReplace","inConstruct","notInConstruct","gfmAutolinkLiteralFromMarkdown","transforms","transformGfmAutolinkLiterals","enter","literalAutolink","enterLiteralAutolink","literalAutolinkEmail","enterLiteralAutolinkValue","literalAutolinkHttp","literalAutolinkWww","exit","exitLiteralAutolink","exitLiteralAutolinkEmail","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","gfmAutolinkLiteralToMarkdown","unsafe","character","before","after","token","type","title","url","children","config","autolinkProtocol","call","data","node","stack","length","sliceSerialize","autolinkEmail","tree","findUrl","findEmail","ignore","_","protocol","domain","path","match","prefix","previous","test","isCorrectDomain","parts","splitUrl","result","value","atext","label","split","trailExec","exec","undefined","slice","index","trail","closingParenIndex","indexOf","openingParens","closingParens","email","code","input","charCodeAt"],"sources":["/home/tonii/My_Folder/Developer/Project/chatbot_matkul_network/rag-chat/node_modules/mdast-util-gfm-autolink-literal/lib/index.js"],"sourcesContent":["/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}