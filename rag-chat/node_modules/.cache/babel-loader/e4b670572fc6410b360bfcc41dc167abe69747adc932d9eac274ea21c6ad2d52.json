{"ast":null,"code":"import _objectSpread from \"/home/tonii/My_Folder/Developer/Project/chatbot_matkul_network/rag-chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport { encodeCharacterReference } from '../util/encode-character-reference.js';\nimport { formatHeadingAsSetext } from '../util/format-heading-as-setext.js';\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1);\n  const tracker = state.createTracker(info);\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext');\n    const subexit = state.enter('phrasing');\n    const value = state.containerPhrasing(node, _objectSpread(_objectSpread({}, tracker.current()), {}, {\n      before: '\\n',\n      after: '\\n'\n    }));\n    subexit();\n    exit();\n    return value + '\\n' + (rank === 1 ? '=' : '-').repeat(\n    // The whole size…\n    value.length - (\n    // Minus the position of the character after the last EOL (or\n    // 0 if there is none)…\n    Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1));\n  }\n  const sequence = '#'.repeat(rank);\n  const exit = state.enter('headingAtx');\n  const subexit = state.enter('phrasing');\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ');\n  let value = state.containerPhrasing(node, _objectSpread({\n    before: '# ',\n    after: '\\n'\n  }, tracker.current()));\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1);\n  }\n  value = value ? sequence + ' ' + value : sequence;\n  if (state.options.closeAtx) {\n    value += ' ' + sequence;\n  }\n  subexit();\n  exit();\n  return value;\n}","map":{"version":3,"names":["encodeCharacterReference","formatHeadingAsSetext","heading","node","_","state","info","rank","Math","max","min","depth","tracker","createTracker","exit","enter","subexit","value","containerPhrasing","_objectSpread","current","before","after","repeat","length","lastIndexOf","sequence","move","test","charCodeAt","slice","options","closeAtx"],"sources":["/home/tonii/My_Folder/Developer/Project/chatbot_matkul_network/rag-chat/node_modules/mdast-util-to-markdown/lib/handle/heading.js"],"sourcesContent":["/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEA,SAAQA,wBAAwB,QAAO,uCAAuC;AAC9E,SAAQC,qBAAqB,QAAO,qCAAqC;;AAEzE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASC,OAAOA,CAACC,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAC5C,MAAMC,IAAI,GAAGC,IAAI,CAACC,GAAG,CAACD,IAAI,CAACE,GAAG,CAAC,CAAC,EAAEP,IAAI,CAACQ,KAAK,IAAI,CAAC,CAAC,EAAE,CAAC,CAAC;EACtD,MAAMC,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAACP,IAAI,CAAC;EAEzC,IAAIL,qBAAqB,CAACE,IAAI,EAAEE,KAAK,CAAC,EAAE;IACtC,MAAMS,IAAI,GAAGT,KAAK,CAACU,KAAK,CAAC,eAAe,CAAC;IACzC,MAAMC,OAAO,GAAGX,KAAK,CAACU,KAAK,CAAC,UAAU,CAAC;IACvC,MAAME,KAAK,GAAGZ,KAAK,CAACa,iBAAiB,CAACf,IAAI,EAAAgB,aAAA,CAAAA,aAAA,KACrCP,OAAO,CAACQ,OAAO,CAAC,CAAC;MACpBC,MAAM,EAAE,IAAI;MACZC,KAAK,EAAE;IAAI,EACZ,CAAC;IACFN,OAAO,CAAC,CAAC;IACTF,IAAI,CAAC,CAAC;IAEN,OACEG,KAAK,GACL,IAAI,GACJ,CAACV,IAAI,KAAK,CAAC,GAAG,GAAG,GAAG,GAAG,EAAEgB,MAAM;IAC7B;IACAN,KAAK,CAACO,MAAM;IACV;IACA;IACChB,IAAI,CAACC,GAAG,CAACQ,KAAK,CAACQ,WAAW,CAAC,IAAI,CAAC,EAAER,KAAK,CAACQ,WAAW,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CACnE,CAAC;EAEL;EAEA,MAAMC,QAAQ,GAAG,GAAG,CAACH,MAAM,CAAChB,IAAI,CAAC;EACjC,MAAMO,IAAI,GAAGT,KAAK,CAACU,KAAK,CAAC,YAAY,CAAC;EACtC,MAAMC,OAAO,GAAGX,KAAK,CAACU,KAAK,CAAC,UAAU,CAAC;;EAEvC;EACA;EACA;EACA;EACAH,OAAO,CAACe,IAAI,CAACD,QAAQ,GAAG,GAAG,CAAC;EAE5B,IAAIT,KAAK,GAAGZ,KAAK,CAACa,iBAAiB,CAACf,IAAI,EAAAgB,aAAA;IACtCE,MAAM,EAAE,IAAI;IACZC,KAAK,EAAE;EAAI,GACRV,OAAO,CAACQ,OAAO,CAAC,CAAC,CACrB,CAAC;EAEF,IAAI,QAAQ,CAACQ,IAAI,CAACX,KAAK,CAAC,EAAE;IACxB;IACAA,KAAK,GAAGjB,wBAAwB,CAACiB,KAAK,CAACY,UAAU,CAAC,CAAC,CAAC,CAAC,GAAGZ,KAAK,CAACa,KAAK,CAAC,CAAC,CAAC;EACxE;EAEAb,KAAK,GAAGA,KAAK,GAAGS,QAAQ,GAAG,GAAG,GAAGT,KAAK,GAAGS,QAAQ;EAEjD,IAAIrB,KAAK,CAAC0B,OAAO,CAACC,QAAQ,EAAE;IAC1Bf,KAAK,IAAI,GAAG,GAAGS,QAAQ;EACzB;EAEAV,OAAO,CAAC,CAAC;EACTF,IAAI,CAAC,CAAC;EAEN,OAAOG,KAAK;AACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}