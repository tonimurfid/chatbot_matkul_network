{"ast":null,"code":"import _objectSpread from \"/home/tonii/My_Folder/Developer/Project/chatbot_matkul_network/rag-chat/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek;\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType;\n  const exit = state.enter('linkReference');\n  let subexit = state.enter('label');\n  const tracker = state.createTracker(info);\n  let value = tracker.move('[');\n  const text = state.containerPhrasing(node, _objectSpread({\n    before: value,\n    after: ']'\n  }, tracker.current()));\n  value += tracker.move(text + '][');\n  subexit();\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack;\n  state.stack = [];\n  subexit = state.enter('reference');\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), _objectSpread({\n    before: value,\n    after: ']'\n  }, tracker.current()));\n  subexit();\n  state.stack = stack;\n  exit();\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']');\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1);\n  } else {\n    value += tracker.move(']');\n  }\n  return value;\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '[';\n}","map":{"version":3,"names":["linkReference","peek","linkReferencePeek","node","_","state","info","type","referenceType","exit","enter","subexit","tracker","createTracker","value","move","text","containerPhrasing","_objectSpread","before","after","current","stack","reference","safe","associationId","slice"],"sources":["/home/tonii/My_Folder/Developer/Project/chatbot_matkul_network/rag-chat/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js"],"sourcesContent":["/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n"],"mappings":";AAAA;AACA;AACA;AACA;;AAEAA,aAAa,CAACC,IAAI,GAAGC,iBAAiB;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,OAAO,SAASF,aAAaA,CAACG,IAAI,EAAEC,CAAC,EAAEC,KAAK,EAAEC,IAAI,EAAE;EAClD,MAAMC,IAAI,GAAGJ,IAAI,CAACK,aAAa;EAC/B,MAAMC,IAAI,GAAGJ,KAAK,CAACK,KAAK,CAAC,eAAe,CAAC;EACzC,IAAIC,OAAO,GAAGN,KAAK,CAACK,KAAK,CAAC,OAAO,CAAC;EAClC,MAAME,OAAO,GAAGP,KAAK,CAACQ,aAAa,CAACP,IAAI,CAAC;EACzC,IAAIQ,KAAK,GAAGF,OAAO,CAACG,IAAI,CAAC,GAAG,CAAC;EAC7B,MAAMC,IAAI,GAAGX,KAAK,CAACY,iBAAiB,CAACd,IAAI,EAAAe,aAAA;IACvCC,MAAM,EAAEL,KAAK;IACbM,KAAK,EAAE;EAAG,GACPR,OAAO,CAACS,OAAO,CAAC,CAAC,CACrB,CAAC;EACFP,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACC,IAAI,GAAG,IAAI,CAAC;EAElCL,OAAO,CAAC,CAAC;EACT;EACA,MAAMW,KAAK,GAAGjB,KAAK,CAACiB,KAAK;EACzBjB,KAAK,CAACiB,KAAK,GAAG,EAAE;EAChBX,OAAO,GAAGN,KAAK,CAACK,KAAK,CAAC,WAAW,CAAC;EAClC;EACA;EACA;EACA;EACA,MAAMa,SAAS,GAAGlB,KAAK,CAACmB,IAAI,CAACnB,KAAK,CAACoB,aAAa,CAACtB,IAAI,CAAC,EAAAe,aAAA;IACpDC,MAAM,EAAEL,KAAK;IACbM,KAAK,EAAE;EAAG,GACPR,OAAO,CAACS,OAAO,CAAC,CAAC,CACrB,CAAC;EACFV,OAAO,CAAC,CAAC;EACTN,KAAK,CAACiB,KAAK,GAAGA,KAAK;EACnBb,IAAI,CAAC,CAAC;EAEN,IAAIF,IAAI,KAAK,MAAM,IAAI,CAACS,IAAI,IAAIA,IAAI,KAAKO,SAAS,EAAE;IAClDT,KAAK,IAAIF,OAAO,CAACG,IAAI,CAACQ,SAAS,GAAG,GAAG,CAAC;EACxC,CAAC,MAAM,IAAIhB,IAAI,KAAK,UAAU,EAAE;IAC9B;IACAO,KAAK,GAAGA,KAAK,CAACY,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EAC5B,CAAC,MAAM;IACLZ,KAAK,IAAIF,OAAO,CAACG,IAAI,CAAC,GAAG,CAAC;EAC5B;EAEA,OAAOD,KAAK;AACd;;AAEA;AACA;AACA;AACA,SAASZ,iBAAiBA,CAAA,EAAG;EAC3B,OAAO,GAAG;AACZ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}